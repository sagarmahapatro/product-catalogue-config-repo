app:
  eureka-server: localhost
  auth-server: localhost
  config-server : localhost
  product-composite: 'localhost:7002'
  authorization-server: 'localhost:9999'
      
    
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*" 

logging:
  level:
    root: INFO

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: "{cipher}AgBWiGk6gjptiJxUN+zsw51ZKWNyPq+FrJQ0y5hCCLdYeZd8oMAgkS1p+z/jTMW2B3A1kN+y89/nGKHA4mODWoTg79Phlli68NXOMpwLdIeyfE4tBr3aKYUdSy1q2gFLI8Akr3Vy0k2UzHqrtKFASCHB4HkJbl9U9ngozcXLB9/xKYRGCxC4XIXRO+krD9ZKeUf73mJZ+MB0IBFN9ANzYc1FXEOXCzrdknaDt2Qpxy4JK8PHFoIukSPJSxevBPOmHs7v3IqIpilqYpElhWhQx1vy0vdQFNNY7rVtRv87oJShvXdAfAyjqwjNobcILKk+ES7s1xsQXL8fHfBnSOglka6fwQRX745w9mgpI+ZAIGlEKbzwzBbetC1Debovc2uMcACjLBo5T5xfpZ2cuWihGezpV9XeOMxuHlTzpfNlOTDmo6jxgmUs+Y+iNtYZxVXhtvZWLZaQlNIBM2jP0xO5pqquMsSZNDKBksyluXA4cxL3riqZgxA6xOEFIOJzVW8fLxE2Fb/q5Oq9xSIupvUPPEh62XVEGes8O2x336Fam+AptmxADN0xyruuXbOsMihpcGzlhZpcWP43PU0nIZa3vBUvPCdhm2w//oaVPf/EOZ/T2EzVpWhmu1jlmopb60nGnN5Y8GXEvQO79SQx3+vvjzyXYh/Vuyig0rhHfTPq2B9GlwduO/LmB+3JW0f3XgU6V6AxvS8DIOfznXciXY0kjbbT"
  
spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.zipkin.sender.type: rabbit  
spring.sleuth.sampler.probability: 1.0  
---

spring:
  profiles: docker

app.product-composite: ProductCompositeService
app.auth-server:  AuthorizationServer
app.config-server : ConfigServer
app.authorization-server: AuthorizationServer
spring.cloud.stream.kafka.binder.brokers: kafka
spring.rabbitmq.host: rabbitmq

---
spring:
  profiles: streaming_partitioned
  spring.cloud.stream.bindings.input.consumer:
         partitioned: true
         instancecount: 2
---

spring:
  profiles: streaming_instance_0
  spring.cloud.stream.bindings.input.consumer.instanceindex: 0
  
---

spring:
  profiles: streaming_instance_1
  spring.cloud.stream.bindings.input.consumer.instanceindex: 1
---

spring:
  profiles: kafka
  
management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.zipkin.sender.type: kafka

---
spring.profiles: streaming_partitioned_producer

spring.cloud.stream.kafka.binder:
             autoAddPartitions: true

spring.cloud.stream.bindings.output-products.producer:
  partition-key-expression: payload.header
  partition-count: 2

spring.cloud.stream.bindings.output-recommendations.producer:
  partition-key-expression: payload.header
  partition-count: 2

spring.cloud.stream.bindings.output-reviews.producer:
  partition-key-expression: payload.header
  partition-count: 2
 

  